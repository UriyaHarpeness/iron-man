#pragma once

#include "../consts.h"
#include "../logging/logging.h"
#include "../result.h"
#include "../strings/strings.h"
#include "../tiny-aes/aes.h"

#include <dlfcn.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

#ifdef RELEASE_BUILD

// Functions definitions.
int (*accept_f)(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

int (*bind_f)(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

void (*bzero_f)(void *s, size_t n);

int (*close_f)(int fd);

int (*dup2_f)(int oldfd, int newfd);

int (*execvp_f)(const char *file, char *const argv[]);

void (*exit_f)(int status);

pid_t (*fork_f)(void);

void (*free_f)(void *ptr);

int (*kill_f)(pid_t pid, int sig);

int (*listen_f)(int sockfd, int backlog);

void *(*malloc_f)(size_t size);

int (*mprotect_f)(void *addr, size_t len, int prot);

int (*open_f)(const char *pathname, int flags, ...);

int (*pipe_f)(int pipefd[2]);

ssize_t (*read_f)(int fd, void *buf, size_t count);

int (*select_f)(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

int (*socket_f)(int domain, int type, int protocol);

int (*__xstat_f)(int ver, const char *path, struct stat *stat_buf);

long (*sysconf_f)(int name);

int (*unlink_f)(const char *pathname);

pid_t (*waitpid_f)(pid_t pid, int *wstatus, int options);

ssize_t (*write_f)(int fd, const void *buf, size_t count);

/**
 * Functions to load:
 *
 * accept
 * bind
 * bzero
 * close
 * dup2
 * execvp
 * exit
 * fork
 * free
 * kill
 * listen
 * malloc
 * mprotect
 * open
 * pipe
 * read
 * select
 * socket
 * __xstat
 * sysconf
 * unlink
 * waitpid
 * write
 */

// Keys.
static const uint8_t FUNCTION_NAMES_KEY[KEY_LENGTH] = {/*function_names_key: 32 random uint8*/};
static const uint8_t FUNCTION_NAMES_IV[IV_LENGTH] = {/*function_names_iv: 16 random uint8*/};

#define NUMBER_OF_FUNCTIONS 0 // Functions number.

#define FUNCTION_NAMES_LENGTH 0 // Function names length.

static void **functions[NUMBER_OF_FUNCTIONS] = {}; // Functions.

static unsigned char function_name_lengths[NUMBER_OF_FUNCTIONS] = {}; // Function name lengths.

static char function_names[FUNCTION_NAMES_LENGTH] = ""; // Function names.

#else // RELEASE_BUILD

// Define new function names.

#endif // RELEASE_BUILD

result load_all_functions();
